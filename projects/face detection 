import cv2
import mediapipe as mp

# Initialize MediaPipe Face Detection
mp_face_detection = mp.solutions.face_detection
mp_drawing = mp.solutions.drawing_utils

# Static images (empty list in this case)
IMAGE_FILES = []  # Add paths to static image files if needed
with mp_face_detection.FaceDetection(model_selection=1, min_detection_confidence=0.5) as face_detection:
    for idx, file in enumerate(IMAGE_FILES):
        image = cv2.imread(file)
        if image is None:
            print(f"Could not read image {file}")
            continue
        
        # Convert the image from BGR to RGB
        results = face_detection.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

        # If no face is detected, skip to the next image
        if not results.detections:
            print(f"No faces detected in {file}")
            continue
        
        # Annotate the detected faces
        annotated_image = image.copy()
        for detection in results.detections:
            print('Nose tip:')
            print(mp_face_detection.get_key_point(detection, mp_face_detection.FaceKeyPoint.NOSE_TIP))
            mp_drawing.draw_detection(annotated_image, detection)
        
        # Save the annotated image
        output_path = f'annotated_image_{idx}.png'
        cv2.imwrite(output_path, annotated_image)
        print(f"Annotated image saved to {output_path}")

# Webcam face detection
cap = cv2.VideoCapture(0)
with mp_face_detection.FaceDetection(model_selection=0, min_detection_confidence=0.5) as face_detection:
    while cap.isOpened():
        success, image = cap.read()
        if not success:
            print("Ignoring empty camera frame.")
            continue

        # Convert the frame to RGB for face detection
        image.flags.writeable = False
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        results = face_detection.process(image_rgb)

        # Draw face detection results on the frame
        image.flags.writeable = True
        if results.detections:
            for detection in results.detections:
                mp_drawing.draw_detection(image, detection)

        # Flip the image horizontally for a selfie-view display
        cv2.imshow('MediaPipe Face Detection', cv2.flip(image, 1))

        # Break the loop on pressing 'Esc'
        if cv2.waitKey(5) & 0xFF == 27:
            break

# Release resources
cap.release()
cv2.destroyAllWindows()
import mediapipe as mp

# Initialize MediaPipe Face Detection
mp_face_detection = mp.solutions.face_detection
mp_drawing = mp.solutions.drawing_utils

# Static images (empty list in this case)
IMAGE_FILES = []  # Add paths to static image files if needed
with mp_face_detection.FaceDetection(model_selection=1, min_detection_confidence=0.5) as face_detection:
    for idx, file in enumerate(IMAGE_FILES):
        image = cv2.imread(file)
        if image is None:
            print(f"Could not read image {file}")
            continue
        
        # Convert the image from BGR to RGB
        results = face_detection.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

        # If no face is detected, skip to the next image
        if not results.detections:
            print(f"No faces detected in {file}")
            continue
        
        # Annotate the detected faces
        annotated_image = image.copy()
        for detection in results.detections:
            print('Nose tip:')
            print(mp_face_detection.get_key_point(detection, mp_face_detection.FaceKeyPoint.NOSE_TIP))
            mp_drawing.draw_detection(annotated_image, detection)
        
        # Save the annotated image
        output_path = f'annotated_image_{idx}.png'
        cv2.imwrite(output_path, annotated_image)
        print(f"Annotated image saved to {output_path}")

# Webcam face detection
cap = cv2.VideoCapture(0)
with mp_face_detection.FaceDetection(model_selection=0, min_detection_confidence=0.5) as face_detection:
    while cap.isOpened():
        success, image = cap.read()
        if not success:
            print("Ignoring empty camera frame.")
            continue

        # Convert the frame to RGB for face detection
        image.flags.writeable = False
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        results = face_detection.process(image_rgb)

        # Draw face detection results on the frame
        image.flags.writeable = True
        if results.detections:
            for detection in results.detections:
                mp_drawing.draw_detection(image, detection)

        # Flip the image horizontally for a selfie-view display
        cv2.imshow('MediaPipe Face Detection', cv2.flip(image, 1))

        # Break the loop on pressing 'Esc'
        if cv2.waitKey(5) & 0xFF == 27:
            break

# Release resources
cap.release()
cv2.destroyAllWindows()